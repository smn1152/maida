import environ
"""
Local settings for Salbion project.
FORCE SQLITE CONFIGURATION - Bypassing PostgreSQL issues
"""

from pathlib import Path
import os
import sys

# Build paths
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# FIRST: Override database to SQLite BEFORE importing base
# This prevents base.py from trying to use PostgreSQL
os.environ['DATABASE_URL'] = 'sqlite:///db.sqlite3'

# Now import base settings
try:
    from .base import *  # noqa
except ImportError:
    print("Warning: Could not import base settings, using minimal config")
    # Minimal configuration if base.py has issues
    # SECRET_KEY from environment
env = environ.Env()
environ.Env.read_env(str(BASE_DIR / '.env'))
SECRET_KEY = env('SECRET_KEY')
    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'maida_vale.nesosa',
        'maida_vale.manufacturing', 
        'maida_vale.uk_compliance',

    ]
    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]
    ROOT_URLCONF = 'config.urls'
    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [BASE_DIR / 'maida_vale' / 'templates'],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

# FORCE SQLite database regardless of what base.py says
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'OPTIONS': {
            'timeout': 20,
        }
    }
}

# Development settings
DEBUG = True
ALLOWED_HOSTS = ['*']  # Allow all hosts in development

# Static files
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'maida_vale' / 'static',
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Security settings for development
# SECRET_KEY from environment
env = environ.Env()
environ.Env.read_env(str(BASE_DIR / '.env'))

# Email backend for development
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Cache configuration - use local memory
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

# Celery Configuration - run synchronously in development
CELERY_TASK_ALWAYS_EAGER = True
CELERY_TASK_EAGER_PROPAGATES = True

# Disable any PostgreSQL-specific settings
USE_TZ = True
TIME_ZONE = 'UTC'
LANGUAGE_CODE = 'en-us'
USE_I18N = True

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

# Try to add debug toolbar if available
try:
    import debug_toolbar
    if 'debug_toolbar' not in INSTALLED_APPS:
        INSTALLED_APPS = list(INSTALLED_APPS) + ['debug_toolbar']
    if 'debug_toolbar.middleware.DebugToolbarMiddleware' not in MIDDLEWARE:
        MIDDLEWARE = ['debug_toolbar.middleware.DebugToolbarMiddleware'] + list(MIDDLEWARE)
    INTERNAL_IPS = ['127.0.0.1', 'localhost']
except (ImportError, NameError):
    pass

# Try to add django_extensions if available
try:
    import django_extensions
    if 'django_extensions' not in INSTALLED_APPS:
        INSTALLED_APPS = list(INSTALLED_APPS) + ['django_extensions']
except (ImportError, NameError):
    pass

# Add your custom apps if they exist
import os
if os.path.exists(BASE_DIR / 'maida_vale' / 'users'):
    try:
        if 'maida_vale.users' not in INSTALLED_APPS:
            INSTALLED_APPS = list(INSTALLED_APPS) + ['maida_vale.users']
    except NameError:
        pass

print("=" * 50)
print("USING FORCED SQLITE CONFIGURATION")
print("Database: SQLite")
print("Settings: config.settings.local")
print("=" * 50)
